{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/yarn","result":{"data":{"markdownRemark":{"id":"4ad69c72-108a-53ab-a051-09c7e9920e3c","html":"<p>Npm, Bower, JSPM… A chaque saison son nouveau package-manager dans l’écosystème JS. Le dernier né, Yarn, a été annoncé il y a quelques semaines par les développpeurs de Facebook. Alors, qu’est-ce que se cache vraiment derrière ce n-ième package-manager ?</p>\n<p><a href=\"https://code.facebook.com/posts/1840075619545360\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Yarn: A new package manager for JavaScript</a></p>\n<p>En premier lieu, Yarn n’a pas l’objectif de remplacer npm ou bower. Il s’agit avant-tout d’un nouveau client ligne de commande permettant la récupération de dépendances depuis le registry npm.</p>\n<p>Il propose en outre les améliorations suivantes :</p>\n<ul>\n<li><strong>Performance</strong>\nOptimisation des appels et maximisation de l’utilisation réseau, notamment via un mécanisme d’analyse de l’arbre des dépendances et de parallélisation des requêtes (vs. en série pour npm)</li>\n<li><strong>Déterministe</strong>\nPour un même projet, les mêmes dépendances seront installées de la même manière sur tous les environnements (plus d’effet <em>“ it works on my machine”</em>)</li>\n<li><strong>Fonctionnement offline</strong>\nUne fois un package installé, il est mis en cache et pourra être installé ensuite sans connexion internet</li>\n<li><strong>Résilience</strong>\nLe processus d’installation est plus robuste, notamment dans le cas de coupure réseau (rejeu des requêtes vs. processus d’installation en erreur)</li>\n<li><strong>Registre multiple</strong>\nPossibilité de récupérer des sources depuis plusieurs registres (npm, bower, github, …)</li>\n<li><strong>Sécurité</strong>\nUtilisation de checksums pour vérifier l’intégrité des dépendances</li>\n</ul>\n<h2 id=\"mise-en-place\" style=\"position:relative;\"><a href=\"#mise-en-place\" aria-label=\"mise en place permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mise en place</h2>\n<p>Pour installer Yarn, le plus simple est encore d’utiliser… npm.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install -g yarn</code></pre></div>\n<p>Dès lors, on peut utiliser le client yarn en lieu et place du client npm</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># npm install\nyarn\n\n# npm init\nyarn init\n\n# npm install angular --save\nyarn add angular \n\n# npm install gulp --global\nyarn global agg gulp\n\n# npm uninstall angular --save\nyarn remove angular\n\n# npm install angular-mocks --save-dev\nyarn add angular-mocks --dev</code></pre></div>\n<p><img src=\"/d3rwan-blog/media/yarn/yarn_loading.gif\" alt=\"Installation avec Yarn\"><em>Installation avec Yarn</em></p>\n<p>Pour le reste, on continue d’utiliser le fichier <em>package.json</em> pour lister les dépendances d’un projet, dépendances qui seront toujours stockées dans le répertoire <em>node_modules</em>. Yarn ajoute néanmoins un nouveau fichier <em>yarn.lock</em>. C’est ce fichier qui va garantir l’installation déterministe, puisqu’il va lister chaque dépendance, la version exacte à utiliser, l’ordre d’installation etc… Ce fichier sera crée lors de la première installation par Yarn, puis mis à jour ensuite lors de chaque modification.</p>\n<p>Il est important de noter que ce fichier doit <strong>être présent sur chaque environnement</strong> afin de garantir une installation <strong>déterministe</strong>, et donc qu’il <strong>doit être versionné</strong>.</p>\n<p>Et les perfs dans tout ca ? Sur un benchmark sur le site de Yarn (donc probablement hyper objectif), les chiffres sont là. C’est <em>vachement</em> plus rapide dans la plupart des cas.</p>\n<p><img src=\"/d3rwan-blog/media/yarn/bench.png\"></p>\n<p><img src=\"/d3rwan-blog/media/yarn/bench2.png\" alt=\"Benchmark NPM / YARN (source: [https://yarnpkg.com/en/compare](https://yarnpkg.com/en/compare))\"><em>Benchmark NPM / YARN (source: <a href=\"https://yarnpkg.com/en/compare\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://yarnpkg.com/en/compare</a>)</em></p>\n<p>Et en réalité ?</p>\n<p>Pour comparer les performance entre les deux outils, j’ai utilisé l’utilitaire <a href=\"https://www.npmjs.com/package/npmvsyarn\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">npmvsyarn</a> qui permet de comparer pour une librairie ou un projet (contenant un <em>package.json</em>) donnés les performances entre l’utilisation de npm &#x26; celle de Yarn.</p>\n<p><img src=\"/d3rwan-blog/media/yarn/ex.png\" alt=\"Exemple avec les librairies Angular &#x26; React\"><em>Exemple avec les librairies Angular &#x26; React</em></p>\n<p>Concernant l’ajout/suppression d’une librairie seule, Yarn est effectivement plus rapide (jusqu’à 50%), en particulier lorsque le cache et le fichier yarn.lock existe.</p>\n<p><img src=\"/d3rwan-blog/media/yarn/ex2.png\"></p>\n<p><img src=\"/d3rwan-blog/media/yarn/ex3.png\" alt=\"Exemple avec un projet React ([redux-webpack-es6-boilerplate](https://github.com/nicksp/redux-webpack-es6-boilerplate)) et un projet Angular ([angular1.4-ES6-material-webpack-boilerplate](https://github.com/shprink/angular1.4-ES6-material-webpack-boilerplate))\"><em>Exemple avec un projet React (<a href=\"https://github.com/nicksp/redux-webpack-es6-boilerplate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">redux-webpack-es6-boilerplate</a>) et un projet Angular (<a href=\"https://github.com/shprink/angular1.4-ES6-material-webpack-boilerplate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">angular1.4-ES6-material-webpack-boilerplate</a>)</em></p>\n<p>Sur un projet complet, Yarn s’en sort mieux également (jusqu’à 2.5 fois plus rapide). Là encore, on voit que la présence du cache et du <em>yarn.lock</em> améliore d’autant plus les performances.</p>\n<p>Bien évidemment, ces exemples sont trop limités pour être représentatifs. Néanmoins, le site <em>berriart.com</em> propose un benchmark plus complet des deux outils sur différents environnements d’intégration continue.</p>\n<p><a href=\"https://www.berriart.com/blog/2016/10/npm-yarn-benchmark/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NPM vs Yarn benchmark</a></p>\n<p>Là encore, les résultats vont dans le même sens:</p>\n<blockquote>\n<p><em>Yarn est entre 2x et 3x plus rapide que npm</em></p>\n</blockquote>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>Après quelques heures d’utilisation, Yarn semble répondre aux attentes qu’il a suscité: plus rapide que npm, avec des fonctionnalités équivalentes, et une migration sans heurts.</p>\n<p>Bien qu’il soit sans doute peut-être un peu tôt pour l’utiliser sur un projet structurant en production, il semble dès aujourd’hui être une alternative crédible au client npm par défaut. On pourra donc facilement l’utiliser sur un nouveau projet ou un projet annexe, afin de confirmer toutes les bonnes prédispositions affichées.</p>\n<p>Quant au futur, on ne peut qu’espérer qu’il permette l’amélioration de l’existant, que se soit en poussant à l’amélioration de npm ou en devenant un standard defacto. A moins qu’un petit-nouveau n’arrive d’ici là, et change encore la donne…</p>","fields":{"slug":"/posts/yarn","tagSlugs":["/tag/js/"]},"frontmatter":{"date":"2016-11-10T12:00:00.000Z","description":"Qu’est-ce que se cache vraiment derrière ce n-ième package-manager, annoncé il y a quelques semaines par Facebook","tags":["JS"],"title":"Yarn, un n-ième package-manager ?","socialImage":"/media/yarn/logo.jpeg"}}},"pageContext":{"slug":"/posts/yarn"}}}